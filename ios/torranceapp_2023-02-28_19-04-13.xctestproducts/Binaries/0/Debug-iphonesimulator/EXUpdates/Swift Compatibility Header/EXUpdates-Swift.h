#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef EXUPDATES_SWIFT_H
#define EXUPDATES_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ExpoModulesCore;
@import Foundation;
@import ObjectiveC;
@import React;
@import UIKit;
#endif

#import <EXUpdates/EXUpdates.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="EXUpdates",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@class NSData;
@class EXUpdatesSignatureValidationResult;

SWIFT_CLASS("_TtC9EXUpdates33EXUpdatesCodeSigningConfiguration")
@interface EXUpdatesCodeSigningConfiguration : NSObject
- (nullable instancetype)initWithEmbeddedCertificateString:(NSString * _Nonnull)embeddedCertificateString metadata:(NSDictionary<NSString *, NSString *> * _Nonnull)metadata includeManifestResponseCertificateChain:(BOOL)includeManifestResponseCertificateChain allowUnsignedManifests:(BOOL)allowUnsignedManifests error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)createAcceptSignatureHeader SWIFT_WARN_UNUSED_RESULT;
- (EXUpdatesSignatureValidationResult * _Nullable)validateSignatureWithSignature:(NSString * _Nullable)signature signedData:(NSData * _Nonnull)signedData manifestResponseCertificateChain:(NSString * _Nullable)manifestResponseCertificateChain error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, EXUpdatesCodeSigningError, closed) {
  EXUpdatesCodeSigningErrorCertificateEncodingError = 0,
  EXUpdatesCodeSigningErrorCertificateDERDecodeError = 1,
  EXUpdatesCodeSigningErrorCertificateValidityError = 2,
  EXUpdatesCodeSigningErrorCertificateMissingPublicKeyError = 3,
  EXUpdatesCodeSigningErrorCertificateDigitalSignatureNotPresentError = 4,
  EXUpdatesCodeSigningErrorCertificateMissingCodeSigningError = 5,
  EXUpdatesCodeSigningErrorCertificateRootNotCA = 6,
  EXUpdatesCodeSigningErrorCertificateProjectInformationChainError = 7,
  EXUpdatesCodeSigningErrorKeyIdMismatchError = 8,
  EXUpdatesCodeSigningErrorSecurityFrameworkError = 9,
  EXUpdatesCodeSigningErrorCertificateEmptyError = 10,
  EXUpdatesCodeSigningErrorCertificateChainError = 11,
  EXUpdatesCodeSigningErrorCertificateRootNotSelfSigned = 12,
  EXUpdatesCodeSigningErrorSignatureHeaderMissing = 13,
  EXUpdatesCodeSigningErrorSignatureHeaderStructuredFieldParseError = 14,
  EXUpdatesCodeSigningErrorSignatureHeaderSigMissing = 15,
  EXUpdatesCodeSigningErrorSignatureHeaderSignatureEncodingError = 16,
  EXUpdatesCodeSigningErrorSignatureEncodingError = 17,
  EXUpdatesCodeSigningErrorAlgorithmParseError = 18,
  EXUpdatesCodeSigningErrorInvalidExpoProjectInformationExtensionValue = 19,
};
static NSString * _Nonnull const EXUpdatesCodeSigningErrorDomain = @"EXUpdates.EXUpdatesCodeSigningError";


SWIFT_CLASS("_TtC9EXUpdates30EXUpdatesCodeSigningErrorUtils")
@interface EXUpdatesCodeSigningErrorUtils : NSObject
+ (NSString * _Nonnull)messageForError:(enum EXUpdatesCodeSigningError)forError SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC9EXUpdates31EXUpdatesExpoProjectInformation")
@interface EXUpdatesExpoProjectInformation : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull projectId;
@property (nonatomic, readonly, copy) NSString * _Nonnull scopeKey;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum EXUpdatesValidationResult : NSInteger;

SWIFT_CLASS("_TtC9EXUpdates34EXUpdatesSignatureValidationResult")
@interface EXUpdatesSignatureValidationResult : NSObject
@property (nonatomic, readonly) enum EXUpdatesValidationResult validationResult;
@property (nonatomic, readonly, strong) EXUpdatesExpoProjectInformation * _Nullable expoProjectInformation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, EXUpdatesValidationResult, closed) {
  EXUpdatesValidationResultValid = 0,
  EXUpdatesValidationResultInvalid = 1,
  EXUpdatesValidationResultSkipped = 2,
};

@class UIApplication;

/// Used only in development builds with expo-dev-client; completes the auto-setup for development
/// builds with the expo-updates integration by passing a reference to EXUpdatesDevLauncherController
/// over to the registry, which expo-dev-client can access.
SWIFT_CLASS("_TtC9EXUpdates32ExpoUpdatesAppDelegateSubscriber")
@interface ExpoUpdatesAppDelegateSubscriber : EXBaseAppDelegateSubscriber <EXAppDelegateSubscriberProtocol>
- (BOOL)application:(UIApplication * _Nonnull)application willFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class ExpoReactDelegate;
@class RCTBridge;
@class RCTRootView;
@class EXUpdatesAppController;
@class NSURL;

/// Manages and controls the auto-setup behavior of expo-updates in applicable environments.
/// In order to deal with the asynchronous nature of updates startup, this class creates dummy
/// RCTBridge and RCTRootView objects to return to the ReactDelegate, replacing them with the real
/// objects when expo-updates is ready.
SWIFT_CLASS("_TtC9EXUpdates31ExpoUpdatesReactDelegateHandler")
@interface ExpoUpdatesReactDelegateHandler : ExpoReactDelegateHandler <EXUpdatesAppControllerDelegate, RCTBridgeDelegate>
- (RCTBridge * _Nullable)createBridgeWithReactDelegate:(ExpoReactDelegate * _Nonnull)reactDelegate bridgeDelegate:(id <RCTBridgeDelegate> _Nonnull)bridgeDelegate launchOptions:(NSDictionary * _Nullable)launchOptions SWIFT_WARN_UNUSED_RESULT;
- (RCTRootView * _Nullable)createRootViewWithReactDelegate:(ExpoReactDelegate * _Nonnull)reactDelegate bridge:(RCTBridge * _Nonnull)bridge moduleName:(NSString * _Nonnull)moduleName initialProperties:(NSDictionary * _Nullable)initialProperties SWIFT_WARN_UNUSED_RESULT;
- (void)appController:(EXUpdatesAppController * _Nonnull)appController didStartWithSuccess:(BOOL)success;
- (NSURL * _Null_unspecified)sourceURLForBridge:(RCTBridge * _Null_unspecified)bridge SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Error codes for expo-updates logs
typedef SWIFT_ENUM_NAMED(NSInteger, EXUpdatesErrorCode, "UpdatesErrorCode", closed) {
  EXUpdatesErrorCodeNone = 0,
  EXUpdatesErrorCodeNoUpdatesAvailable = 1,
  EXUpdatesErrorCodeUpdateAssetsNotAvailable = 2,
  EXUpdatesErrorCodeUpdateServerUnreachable = 3,
  EXUpdatesErrorCodeUpdateHasInvalidSignature = 4,
  EXUpdatesErrorCodeUpdateFailedToLoad = 5,
  EXUpdatesErrorCodeAssetsFailedToLoad = 6,
  EXUpdatesErrorCodeJsRuntimeError = 7,
  EXUpdatesErrorCodeUnknown = 8,
  EXUpdatesErrorCodeUpdateCodeSigningError = 9,
};

@class NSDate;

/// Class to read expo-updates logs using OSLogReader
SWIFT_CLASS_NAMED("UpdatesLogReader")
@interface EXUpdatesLogReader : NSObject
/// Get expo-updates logs newer than the given date
/// Returns the log entries unpacked as dictionaries
/// Maximum of one day lookback is allowed
- (NSArray<NSDictionary<NSString *, id> *> * _Nullable)getLogEntriesNewerThan:(NSDate * _Nonnull)newerThan error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Get expo-updates logs newer than the given date
/// Returned strings are all in the JSON format of UpdatesLogEntry
/// Maximum of one day lookback is allowed
- (NSArray<NSString *> * _Nonnull)getLogEntryStringsNewerThan:(NSDate * _Nonnull)newerThan SWIFT_WARN_UNUSED_RESULT;
/// Purge all log entries written more than one day ago
- (void)purgeLogEntries:(void (^ _Nonnull)(NSError * _Nullable))completion;
/// Purge all log entries written prior to the given date
- (void)purgeLogEntriesOlderThan:(NSDate * _Nonnull)olderThan completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Class that implements logging for expo-updates in its own os.log category
SWIFT_CLASS_NAMED("UpdatesLogger")
@interface EXUpdatesLogger : NSObject
- (void)trace:(NSString * _Nonnull)message code:(enum EXUpdatesErrorCode)code updateId:(NSString * _Nullable)updateId assetId:(NSString * _Nullable)assetId;
- (void)trace:(NSString * _Nonnull)message code:(enum EXUpdatesErrorCode)code;
- (void)trace:(NSString * _Nonnull)message;
- (void)debug:(NSString * _Nonnull)message code:(enum EXUpdatesErrorCode)code updateId:(NSString * _Nullable)updateId assetId:(NSString * _Nullable)assetId;
- (void)debug:(NSString * _Nonnull)message code:(enum EXUpdatesErrorCode)code;
- (void)debug:(NSString * _Nonnull)message;
- (void)info:(NSString * _Nonnull)message code:(enum EXUpdatesErrorCode)code updateId:(NSString * _Nullable)updateId assetId:(NSString * _Nullable)assetId;
- (void)info:(NSString * _Nonnull)message code:(enum EXUpdatesErrorCode)code;
- (void)info:(NSString * _Nonnull)message;
- (void)warn:(NSString * _Nonnull)message code:(enum EXUpdatesErrorCode)code updateId:(NSString * _Nullable)updateId assetId:(NSString * _Nullable)assetId;
- (void)warn:(NSString * _Nonnull)message code:(enum EXUpdatesErrorCode)code;
- (void)warn:(NSString * _Nonnull)message;
- (void)error:(NSString * _Nonnull)message code:(enum EXUpdatesErrorCode)code updateId:(NSString * _Nullable)updateId assetId:(NSString * _Nullable)assetId;
- (void)error:(NSString * _Nonnull)message code:(enum EXUpdatesErrorCode)code;
- (void)fatal:(NSString * _Nonnull)message code:(enum EXUpdatesErrorCode)code updateId:(NSString * _Nullable)updateId assetId:(NSString * _Nullable)assetId;
- (void)fatal:(NSString * _Nonnull)message code:(enum EXUpdatesErrorCode)code;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
